/*
 * knapsack.rs
 *
 * Copyright (C) 2021 Sharaz Ali
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program.  If not, see <http://www.gnu.org/licenses/>.
 */

pub struct Knapsack {
    pub optimum: f64,
    pub capacity: f64,
    pub weights: Vec<f64>,
    pub values: Vec<f64>
}

impl Knapsack {
    pub fn objective(&self, genes: &[bool]) -> f64{
        let w: f64 = dot(genes, &self.weights);
        let v: f64 = dot(genes, &self.values);
        if w > self.capacity {
            return -v;
        } else {
            return v;
        }
    }
}

fn dot(x: &[bool], y: &[f64]) -> f64 {
    let mut f: f64 = 0.0;
    for i in 0..x.len() {
        f += (x[i] as i8) as f64 * y[i];
    }
    return f;
}

pub fn get_knapsack(option: usize) -> Knapsack {
    match option {
        1 => return Knapsack{
            optimum: 295.0,
            capacity: 269.0,
            weights: vec![95.0, 4.0, 60.0, 32.0, 23.0, 72.0, 80.0, 
            62.0, 65.0, 46.0],
            values: vec![55.0, 10.0, 47.0, 5.0, 4.0, 50.0, 8.0, 
            61.0, 85.0, 87.0]
        },
        2 => return Knapsack{
            optimum: 1024.0,
            capacity: 878.0,
            weights: vec![92.0, 4.0, 43.0, 83.0, 84.0, 68.0, 92.0, 
            82.0, 6.0, 44.0, 32.0, 18.0, 56.0, 83.0, 25.0, 96.0, 
            70.0, 48.0, 14.0, 58.0],
            values: vec![44.0, 46.0, 90.0, 72.0, 91.0, 40.0, 75.0, 
            35.0, 8.0, 54.0, 78.0, 40.0, 77.0, 15.0, 61.0, 17.0, 
            75.0, 29.0, 75.0, 63.0]
        },
        3 => return Knapsack{
            optimum: 35.0,
            capacity: 20.0,
            weights: vec![6.0, 5.0, 9.0, 7.0],
            values: vec![9.0, 11.0, 13.0, 15.0]
        },
        4 => return Knapsack{
            optimum: 23.0,
            capacity: 11.0,
            weights: vec![2.0, 4.0, 6.0, 7.0],
            values: vec![6.0, 10.0, 12.0, 13.0]
        },
        5 => return Knapsack{
            optimum: 481.0694,
            capacity: 375.0,
            weights: vec![5.635853e+01, 8.087405e+01, 4.798730e+01,
            8.959624e+01, 7.466048e+01, 8.589435e+01, 5.135350e+01,
            1.498459e+00, 3.644520e+01, 1.658986e+01, 4.456923e+01,
            4.669330e-01, 3.778802e+01, 5.711844e+01, 6.071657e+01],
            values: vec![1.251260e-01, 1.933042e+01, 5.850093e+01,
            3.502914e+01, 8.228400e+01, 1.741081e+01, 7.105014e+01,
            3.039949e+01, 9.140294e+00, 1.473128e+01, 9.885250e+01,
            1.190832e+01, 8.911400e-01, 5.316629e+01, 6.017640e+01]
        },
        6 => return Knapsack{
            optimum: 52.0,
            capacity: 60.0,
            weights: vec![30.0, 25.0, 20.0, 18.0, 17.0, 11.0, 5.0, 
            2.0, 1.0, 1.0],
            values: vec![20.0, 18.0, 17.0, 15.0, 15.0, 10.0, 5.0, 
            3.0, 1.0, 1.0]
        },
        7 => return Knapsack{
            optimum: 107.0,
            capacity: 50.0,
            weights: vec![31.0, 10.0, 20.0, 19.0, 4.0, 3.0, 6.0],
            values: vec![70.0, 20.0, 39.0, 37.0, 7.0, 5.0, 10.0]
        },
        8 => return Knapsack{
            optimum: 9767.0,
            capacity: 10000.0,
            weights: vec![983.0, 982.0, 981.0, 980.0, 979.0, 978.0, 
            488.0, 976.0, 972.0, 486.0, 486.0, 972.0, 972.0, 485.0, 
            485.0, 969.0, 966.0, 483.0, 964.0, 963.0, 961.0, 958.0, 
            959.0],
            values: vec![981.0, 980.0, 979.0, 978.0, 977.0, 976.0, 
            487.0, 974.0, 970.0, 485.0, 485.0, 970.0, 970.0, 484.0, 
            484.0, 976.0, 974.0, 482.0, 962.0, 961.0, 959.0, 958.0, 
            857.0]
        },
        9 => return Knapsack{
            optimum: 130.0,
            capacity: 80.0,
            weights: vec![15.0, 20.0, 17.0, 8.0, 31.0],
            values: vec![33.0, 24.0, 36.0, 37.0, 12.0]
        },
        10 => return Knapsack{
            optimum: 1025.0,
            capacity: 879.0,
            weights: vec![84.0, 83.0, 43.0, 4.0, 44.0, 6.0, 82.0, 
            92.0, 25.0, 83.0, 56.0, 18.0, 58.0, 14.0, 48.0, 70.0, 
            96.0, 32.0, 68.0, 92.0],
            values: vec![91.0, 72.0, 90.0, 46.0, 55.0, 8.0, 35.0, 
            75.0, 61.0, 15.0, 77.0, 40.0, 63.0, 75.0, 29.0, 75.0, 
            17.0, 78.0, 40.0, 44.0]
        },
        11 => return Knapsack{
            optimum: 1437.0,
            capacity: 577.0,
            weights: vec![46.0, 17.0, 35.0, 1.0, 26.0, 17.0, 17.0, 
            48.0, 38.0, 17.0, 32.0, 21.0, 29.0, 48.0, 31.0, 8.0, 
            42.0, 37.0, 6.0, 9.0, 15.0, 22.0, 27.0, 14.0, 42.0, 
            40.0, 14.0, 31.0, 6.0, 34.0],
            values: vec![57.0, 64.0, 50.0, 6.0, 52.0, 6.0, 85.0, 
            60.0, 70.0, 65.0, 63.0, 96.0, 18.0, 48.0, 85.0, 50.0, 
            77.0, 18.0, 70.0, 92.0, 17.0, 43.0, 5.0, 23.0, 67.0, 
            88.0, 35.0, 3.0, 91.0, 48.0]
        },
        12 => return Knapsack{
            optimum: 1689.0,
            capacity: 655.0,
            weights: vec![7.0, 4.0, 36.0, 47.0, 6.0, 33.0, 8.0, 
            35.0, 32.0, 3.0, 40.0, 50.0, 22.0, 18.0, 3.0, 12.0, 
            30.0, 31.0, 13.0, 33.0, 4.0, 48.0, 5.0, 17.0, 33.0, 
            26.0, 27.0, 19.0, 39.0, 15.0, 33.0, 47.0, 17.0, 41.0, 
            40.0],
            values: vec![35.0, 67.0, 30.0, 69.0, 40.0, 40.0, 21.0, 
            73.0, 82.0, 93.0, 52.0, 20.0, 61.0, 20.0, 42.0, 86.0, 
            43.0, 93.0, 38.0, 70.0, 59.0, 11.0, 42.0, 93.0, 6.0, 
            39.0, 25.0, 23.0, 36.0, 93.0, 51.0, 81.0, 36.0, 46.0, 
            96.0]
        },
        13 => return Knapsack{
            optimum: 1821.0,
            capacity: 819.0,
            weights: vec![28.0, 23.0, 35.0, 38.0, 20.0, 29.0, 11.0, 
            48.0, 26.0, 14.0, 12.0, 48.0, 35.0, 36.0, 33.0, 39.0, 
            30.0, 26.0, 44.0, 20.0, 13.0, 15.0, 46.0, 36.0, 43.0, 
            19.0, 32.0, 2.0, 47.0, 24.0, 26.0, 39.0, 17.0, 32.0, 
            17.0, 16.0, 33.0, 22.0, 6.0, 12.0],
            values: vec![13.0, 16.0, 42.0, 69.0, 66.0, 68.0, 1.0, 
            13.0, 77.0, 85.0, 75.0, 95.0, 92.0, 23.0, 51.0, 79.0, 
            53.0, 62.0, 56.0, 74.0, 7.0, 50.0, 23.0, 34.0, 56.0, 
            75.0, 42.0, 51.0, 13.0, 22.0, 30.0, 45.0, 25.0, 27.0, 
            90.0, 59.0, 94.0, 62.0, 26.0, 11.0]
        },
        14 => return Knapsack{
            optimum: 2033.0,
            capacity: 907.0,
            weights: vec![18.0, 12.0, 38.0, 12.0, 23.0, 13.0, 18.0, 
            46.0, 1.0, 7.0, 20.0, 43.0, 11.0, 47.0, 49.0, 19.0, 50.0, 
            7.0, 39.0, 29.0, 32.0, 25.0, 12.0, 8.0, 32.0, 41.0, 34.0, 
            24.0, 48.0, 30.0, 12.0, 35.0, 17.0, 38.0, 50.0, 14.0, 
            47.0, 35.0, 5.0, 13.0, 47.0, 24.0, 45.0, 39.0, 1.0],
            values: vec![98.0, 70.0, 66.0, 33.0, 2.0, 58.0, 4.0, 27.0, 
            20.0, 45.0, 77.0, 63.0, 32.0, 30.0, 8.0, 18.0, 73.0, 9.0, 
            92.0, 43.0, 8.0, 58.0, 84.0, 35.0, 78.0, 71.0, 60.0, 38.0, 
            40.0, 43.0, 43.0, 22.0, 50.0, 4.0, 57.0, 5.0, 88.0, 87.0, 
            34.0, 98.0, 96.0, 99.0, 16.0, 1.0, 25.0]
        },
        15 => return Knapsack{
            optimum: 2440.0,
            capacity: 882.0,
            weights: vec![15.0, 40.0, 22.0, 28.0, 50.0, 35.0, 49.0, 
            5.0, 45.0, 3.0, 7.0, 32.0, 19.0, 16.0, 40.0, 16.0, 31.0, 
            24.0, 15.0, 42.0, 29.0, 4.0, 14.0, 9.0, 29.0, 11.0, 25.0, 
            37.0, 48.0, 39.0, 5.0, 47.0, 49.0, 31.0, 48.0, 17.0, 46.0, 
            1.0, 25.0, 8.0, 16.0, 9.0, 30.0, 33.0, 18.0, 3.0, 3.0, 
            3.0, 4.0, 1.0],
            values: vec![78.0, 69.0, 87.0, 59.0, 63.0, 12.0, 22.0, 
            4.0, 45.0, 33.0, 29.0, 50.0, 19.0, 94.0, 95.0, 60.0, 1.0, 
            91.0, 69.0, 8.0, 100.0, 32.0, 81.0, 47.0, 59.0, 48.0, 56.0, 
            18.0, 59.0, 16.0, 45.0, 54.0, 47.0, 84.0, 100.0, 98.0, 75.0, 
            20.0, 4.0, 19.0, 58.0, 63.0, 37.0, 64.0, 90.0, 26.0, 29.0, 
            13.0, 53.0, 83.0]
        },
        _ => return Knapsack{
            optimum: 5.0,
            capacity: 5.0,
            weights: vec![1.0, 2.0, 3.0, 4.0, 5.0],
            values: vec![1.0, 2.0, 3.0, 4.0, 5.0]
        }
    }
}